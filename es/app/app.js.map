{"version":3,"file":"app.js","sourceRoot":"","sources":["../../src/app/app.ts"],"names":[],"mappings":"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","sourcesContent":["/**\n * This file is part of the peer-data package.\n *\n * (c) Rafa≈Ç Lorenz <vardius@gmail.com>\n *\n * For the full copyright and license information, please view the LICENSE\n * file that was distributed with this source code.\n */\nimport { EventType } from './handler/event-type';\nimport { EventDispatcher } from './handler/dispatcher';\nimport { Event } from './signaling/event';\nimport { EventType as SignalingEventType } from './signaling/event-type';\nimport { Signaling } from './signaling/signaling';\nimport { Connection } from './connection/connection';\nimport { Bridge } from './bridge';\nimport { EventHandler } from './handler/handler'\n\nexport class App {\n  private bridge: Bridge;\n  private _signaling: Signaling = null;\n\n  constructor(servers: RTCConfiguration = {}, dataConstraints: RTCDataChannelInit = null) {\n    const connection = new Connection(servers, dataConstraints);\n    this.bridge = new Bridge(connection);\n  }\n\n  on(event: EventType, callback: EventHandler) {\n    EventDispatcher.register(event, callback);\n  }\n\n  send(data: any, id?: string) {\n    if (id) {\n      const channel = this.bridge.connection.channels[id];\n      if (channel) {\n        channel.send(data);\n      }\n    } else {\n      Object\n        .entries(this.bridge.connection.channels)\n        .forEach(([key, value]) => value.send(data));\n    }\n  }\n\n  connect() {\n    let event: Event = {\n      type: SignalingEventType.CONNECT,\n      caller: null,\n      callee: null,\n      data: null\n    };\n    this._signaling.send(event);\n  }\n\n  disconnect() {\n    Object\n      .entries(this.bridge.connection.channels)\n      .forEach(([key, value]) => value.close());\n\n    Object\n      .entries(this.bridge.connection.peers)\n      .forEach(([key, value]) => value.close());\n\n    const event: Event = {\n      type: SignalingEventType.DISCONNECT,\n      caller: null,\n      callee: null,\n      data: null\n    };\n    this._signaling.send(event);\n  }\n\n  get servers(): RTCConfiguration {\n    return this.bridge.connection.servers;\n  }\n\n  set servers(value: RTCConfiguration) {\n    this.bridge.connection.servers = value;\n  }\n\n  get dataConstraints(): RTCDataChannelInit {\n    return this.bridge.connection.dataConstraints;\n  }\n\n  set dataConstraints(value: RTCDataChannelInit) {\n    this.bridge.connection.dataConstraints = value;\n  }\n\n  get signaling(): Signaling {\n    return this._signaling;\n  }\n\n  set signaling(value: Signaling) {\n    this._signaling = value;\n  }\n}\n"]}