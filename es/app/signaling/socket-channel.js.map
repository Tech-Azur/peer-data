{"version":3,"file":"socket-channel.js","sourceRoot":"","sources":["../../../src/app/signaling/socket-channel.ts"],"names":[],"mappings":"AACA,OAAO,KAAK,EAAE,MAAM,kBAAkB,CAAC;AAGvC,OAAO,EAAE,eAAe,EAAE,MAAM,4BAA4B,CAAC;AAC7D,OAAO,EAAE,SAAS,EAAE,MAAM,yBAAyB,CAAC;AAEpD,MAAM;IAGJ,YAAY,IAAiC;QAC3C,IAAI,CAAC,MAAM,GAAG,EAAE,CAAC,OAAO,CAAC,IAAI,CAAC,CAAC;QAE/B,IAAI,CAAC,eAAe,EAAE,CAAC;IACzB,CAAC;IAEO,eAAe;QACrB,IAAI,CAAC,MAAM,CAAC,EAAE,CAAC,SAAS,EAAE,IAAI,CAAC,SAAS,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC,CAAC;QACrD,IAAI,CAAC,MAAM,CAAC,EAAE,CAAC,QAAQ,EAAE,IAAI,CAAC,IAAI,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC,CAAC;QAC/C,IAAI,CAAC,MAAM,CAAC,EAAE,CAAC,KAAK,EAAE,IAAI,CAAC,KAAK,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC,CAAC;QAC7C,eAAe,CAAC,QAAQ,CAAC,MAAM,EAAE,IAAI,CAAC,MAAM,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC,CAAC;IAC3D,CAAC;IAED,MAAM,CAAC,KAAY;QACjB,IAAI,CAAC,MAAM,CAAC,IAAI,CAAC,SAAS,EAAE,KAAK,CAAC,CAAC;IACrC,CAAC;IAEO,IAAI,CAAC,MAAc;QACzB,eAAe,CAAC,QAAQ,CAAC,SAAS,CAAC,GAAG,EAAE,wBAAwB,GAAG,MAAM,CAAC,CAAC;IAC7E,CAAC;IAEO,KAAK,CAAC,GAAG,IAAW;QAC1B,eAAe,CAAC,QAAQ,CAAC,SAAS,CAAC,GAAG,EAAE,IAAI,CAAC,CAAC;IAChD,CAAC;IAEO,SAAS,CAAC,KAAY;QAC5B,eAAe,CAAC,QAAQ,CAAC,KAAK,CAAC,IAAI,EAAE,KAAK,CAAC,CAAC;IAC9C,CAAC;CACF","sourcesContent":["import Socket = SocketIOClient.Socket;\nimport * as io from 'socket.io-client';\nimport { Signaling } from './signaling';\nimport { Event } from './../connection/event';\nimport { EventDispatcher } from './../dispatcher/dispatcher';\nimport { EventType } from './../channel/event-type';\n\nexport class SocketChannel implements Signaling {\n  private socket: Socket;\n\n  constructor(opts?: SocketIOClient.ConnectOpts) {\n    this.socket = io.connect(opts);\n\n    this.subscribeEvents();\n  }\n\n  private subscribeEvents() {\n    this.socket.on('message', this.onMessage.bind(this));\n    this.socket.on('ipaddr', this.onIp.bind(this));\n    this.socket.on('log', this.onLog.bind(this));\n    EventDispatcher.register('send', this.onSend.bind(this));\n  }\n\n  onSend(event: Event) {\n    this.socket.emit('message', event);\n  }\n\n  private onIp(ipaddr: string) {\n    EventDispatcher.dispatch(EventType.LOG, 'Server IP address is: ' + ipaddr);\n  }\n\n  private onLog(...args: any[]) {\n    EventDispatcher.dispatch(EventType.LOG, args);\n  }\n\n  private onMessage(event: Event) {\n    EventDispatcher.dispatch(event.type, event);\n  }\n}\n"]}