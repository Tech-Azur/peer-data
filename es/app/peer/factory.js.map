{"version":3,"file":"factory.js","sourceRoot":"","sources":["../../../src/app/peer/factory.ts"],"names":[],"mappings":"AAUA,OAAO,EAAE,SAAS,EAAE,MAAM,yBAAyB,CAAC;AAEpD,MAAM;IACJ,MAAM,CAAC,GAAG,CAAC,OAAyB,EAAE,SAAoB;QACxD,IAAI,IAAI,GAAG,IAAI,iBAAiB,CAAC,OAAO,CAAC,CAAC;QAE1C,IAAI,CAAC,cAAc,GAAG,CAAC,KAAgC;YACrD,IAAI,OAAO,GAAU;gBACnB,IAAI,EAAE,SAAS,CAAC,SAAS;gBACzB,MAAM,EAAE,IAAI;gBACZ,MAAM,EAAE,IAAI;gBACZ,IAAI,EAAE,KAAK,CAAC,SAAS;aACtB,CAAC;YACF,SAAS,CAAC,IAAI,CAAC,OAAO,CAAC,CAAC;QAC1B,CAAC,CAAC;QAEF,MAAM,CAAC,IAAI,CAAC;IACd,CAAC;CACF","sourcesContent":["/**\n * This file is part of the peer-data package.\n *\n * (c) Rafa≈Ç Lorenz <vardius@gmail.com>\n *\n * For the full copyright and license information, please view the LICENSE\n * file that was distributed with this source code.\n */\nimport { Signaling } from '../signaling/signaling';\nimport { Event } from '../signaling/event';\nimport { EventType } from '../signaling/event-type';\n\nexport class PeerFactory {\n  static get(servers: RTCConfiguration, signaling: Signaling): RTCPeerConnection {\n    let peer = new RTCPeerConnection(servers);\n\n    peer.onicecandidate = (event: RTCPeerConnectionIceEvent) => {\n      let message: Event = {\n        type: EventType.CANDIDATE,\n        caller: null,\n        callee: null,\n        data: event.candidate\n      };\n      signaling.send(message);\n    };\n\n    return peer;\n  }\n}\n"]}