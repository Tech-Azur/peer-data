{"version":3,"file":"factory.js","sourceRoot":"","sources":["../../../src/app/peer/factory.ts"],"names":[],"mappings":"AAAA,OAAO,EAAE,eAAe,EAAE,MAAM,4BAA4B,CAAC;AAE7D,OAAO,EAAE,SAAS,EAAE,MAAM,4BAA4B,CAAC;AAEvD,MAAM;IACJ,MAAM,CAAC,GAAG,CAAC,OAAyB,EAAE,KAAY;QAChD,IAAI,IAAI,GAAG,IAAI,iBAAiB,CAAC,OAAO,CAAC,CAAC;QAE1C,IAAI,CAAC,cAAc,GAAG,CAAC,QAAmC;YACxD,IAAI,OAAO,GAAU;gBACnB,IAAI,EAAE,SAAS,CAAC,SAAS;gBACzB,MAAM,EAAE,IAAI;gBACZ,MAAM,EAAE,KAAK,CAAC,MAAM;gBACpB,IAAI,EAAE,KAAK,CAAC,IAAI;gBAChB,IAAI,EAAE,QAAQ,CAAC,SAAS;aACzB,CAAC;YACF,eAAe,CAAC,QAAQ,CAAC,MAAM,EAAE,OAAO,CAAC,CAAC;QAC5C,CAAC,CAAC;QACF,MAAM,CAAC,IAAI,CAAC;IACd,CAAC;CACF","sourcesContent":["import { EventDispatcher } from './../dispatcher/dispatcher';\nimport { Event } from './../connection/event';\nimport { EventType } from './../connection/event-type';\n\nexport class PeerFactory {\n  static get(servers: RTCConfiguration, event: Event): RTCPeerConnection {\n    let peer = new RTCPeerConnection(servers);\n\n    peer.onicecandidate = (ideEvent: RTCPeerConnectionIceEvent) => {\n      let message: Event = {\n        type: EventType.CANDIDATE,\n        caller: null,\n        callee: event.caller,\n        room: event.room,\n        data: ideEvent.candidate\n      };\n      EventDispatcher.dispatch('send', message);\n    };\n    return peer;\n  }\n}\n"]}