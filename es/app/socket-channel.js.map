{"version":3,"file":"socket-channel.js","sourceRoot":"","sources":["../../src/app/socket-channel.ts"],"names":[],"mappings":"AASA,OAAO,KAAK,EAAE,MAAM,kBAAkB,CAAC;AAIvC,OAAO,EAAE,kBAAkB,EAAE,MAAM,wBAAwB,CAAC;AAC5D,OAAO,EAAE,eAAe,EAAE,MAAM,sBAAsB,CAAC;AACvD,OAAO,EAAE,SAAS,EAAE,MAAM,sBAAsB,CAAC;AAEjD,MAAM;IAIJ,YAAY,MAAc,EAAE,IAAiC;QAC3D,IAAI,CAAC,MAAM,GAAG,EAAE,CAAC,OAAO,CAAC,IAAI,CAAC,CAAC;QAC/B,IAAI,CAAC,MAAM,GAAG,MAAM,CAAC;QAErB,IAAI,CAAC,eAAe,EAAE,CAAC;IACzB,CAAC;IAED,IAAI,CAAC,KAAqB;QACxB,IAAI,CAAC,MAAM,CAAC,IAAI,CAAC,SAAS,EAAE,KAAK,CAAC,CAAC;IACrC,CAAC;IAEO,eAAe;QACrB,IAAI,CAAC,MAAM,CAAC,EAAE,CAAC,SAAS,EAAE,IAAI,CAAC,SAAS,CAAC,CAAC;QAC1C,IAAI,CAAC,MAAM,CAAC,EAAE,CAAC,QAAQ,EAAE,IAAI,CAAC,IAAI,CAAC,CAAC;QACpC,IAAI,CAAC,MAAM,CAAC,EAAE,CAAC,KAAK,EAAE,IAAI,CAAC,KAAK,CAAC,CAAC;IACpC,CAAC;IAEO,IAAI,CAAC,MAAc;QACzB,eAAe,CAAC,QAAQ,CAAC,SAAS,CAAC,GAAG,EAAE,wBAAwB,GAAG,MAAM,CAAC,CAAC;IAC7E,CAAC;IAEO,KAAK,CAAC,GAAG,IAAW;QAC1B,eAAe,CAAC,QAAQ,CAAC,SAAS,CAAC,GAAG,EAAE,IAAI,CAAC,CAAC;IAChD,CAAC;IAEO,SAAS,CAAC,KAAqB;QACrC,MAAM,CAAC,CAAC,KAAK,CAAC,IAAI,CAAC,CAAC,CAAC;YACnB,KAAK,kBAAkB,CAAC,KAAK;gBAC3B,IAAI,CAAC,MAAM,CAAC,OAAO,CAAC,KAAK,EAAE,IAAI,CAAC,CAAC;gBACjC,KAAK,CAAC;YACR,KAAK,kBAAkB,CAAC,MAAM;gBAC5B,IAAI,CAAC,MAAM,CAAC,QAAQ,CAAC,KAAK,CAAC,CAAC;gBAC5B,KAAK,CAAC;YACR,KAAK,kBAAkB,CAAC,SAAS;gBAC/B,IAAI,CAAC,MAAM,CAAC,WAAW,CAAC,KAAK,CAAC,CAAC;gBAC/B,KAAK,CAAC;YACR,KAAK,kBAAkB,CAAC,OAAO;gBAC7B,IAAI,CAAC,MAAM,CAAC,SAAS,CAAC,KAAK,EAAE,IAAI,CAAC,CAAC;gBACnC,KAAK,CAAC;YACR,KAAK,kBAAkB,CAAC,UAAU;gBAChC,IAAI,CAAC,MAAM,CAAC,YAAY,CAAC,KAAK,CAAC,CAAC;gBAChC,KAAK,CAAC;QACV,CAAC;IACH,CAAC;CACF","sourcesContent":["/**\n * This file is part of the peer-data package.\n *\n * (c) Rafa≈Ç Lorenz <vardius@gmail.com>\n *\n * For the full copyright and license information, please view the LICENSE\n * file that was distributed with this source code.\n */\nimport Socket = SocketIOClient.Socket;\nimport * as io from 'socket.io-client';\nimport { Bridge } from './bridge';\nimport { Signaling } from './signaling/signaling';\nimport { SignalingEvent } from './signaling/event';\nimport { SignalingEventType } from './signaling/event-type';\nimport { EventDispatcher } from './handler/dispatcher';\nimport { EventType } from './handler/event-type';\n\nexport class SocketChannel implements Signaling {\n  private socket: Socket;\n  private bridge: Bridge;\n\n  constructor(bridge: Bridge, opts?: SocketIOClient.ConnectOpts) {\n    this.socket = io.connect(opts);\n    this.bridge = bridge;\n\n    this.subscribeEvents();\n  }\n\n  send(event: SignalingEvent) {\n    this.socket.emit('message', event);\n  }\n\n  private subscribeEvents() {\n    this.socket.on('message', this.onMessage);\n    this.socket.on('ipaddr', this.onIp);\n    this.socket.on('log', this.onLog);\n  }\n\n  private onIp(ipaddr: string) {\n    EventDispatcher.dispatch(EventType.LOG, 'Server IP address is: ' + ipaddr);\n  }\n\n  private onLog(...args: any[]) {\n    EventDispatcher.dispatch(EventType.LOG, args);\n  }\n\n  private onMessage(event: SignalingEvent) {\n    switch (event.type) {\n      case SignalingEventType.OFFER:\n        this.bridge.onOffer(event, this);\n        break;\n      case SignalingEventType.ANSWER:\n        this.bridge.onAnswer(event);\n        break;\n      case SignalingEventType.CANDIDATE:\n        this.bridge.onCandidate(event);\n        break;\n      case SignalingEventType.CONNECT:\n        this.bridge.onConnect(event, this);\n        break;\n      case SignalingEventType.DISCONNECT:\n        this.bridge.onDisconnect(event);\n        break;\n    }\n  }\n}\n"]}