{"version":3,"file":"bridge.js","sourceRoot":"","sources":["../../src/app/bridge.ts"],"names":[],"mappings":"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","sourcesContent":["import { Event } from './connection/event';\nimport { EventType } from './connection/event-type';\nimport { PeerFactory } from './peer/factory';\nimport { DataChannelFactory } from './channel/factory';\nimport { Signaling } from './signaling/signaling';\nimport { Connection } from './connection/connection';\nimport { EventDispatcher } from './dispatcher/dispatcher';\nimport { EventType as DataEventType } from './channel/event-type';\n\nconst LABEL = 'chunks';\n\nexport class Bridge {\n  private _connection: Connection;\n\n  constructor(connection: Connection) {\n    this._connection = connection;\n\n    EventDispatcher.register(EventType.CONNECT, this.onConnect.bind(this));\n    EventDispatcher.register(EventType.DISCONNECT, this.onDisconnect.bind(this));\n    EventDispatcher.register(EventType.OFFER, this.onOffer.bind(this));\n    EventDispatcher.register(EventType.ANSWER, this.onAnswer.bind(this));\n    EventDispatcher.register(EventType.CANDIDATE, this.onCandidate.bind(this));\n  }\n\n  get connection(): Connection {\n    return this._connection;\n  }\n\n  set connection(value: Connection) {\n    this._connection = value;\n  }\n\n  onConnect(event: Event) {\n    let peer = this._connection.peers[event.caller.id] = PeerFactory.get(this._connection.servers, event);\n    let channel = peer.createDataChannel(LABEL, this._connection.dataConstraints);\n    this._connection.channels[event.caller.id] = DataChannelFactory.get(channel);\n    peer.createOffer((desc: RTCSessionDescription) => {\n      let message: Event = {\n        type: EventType.OFFER,\n        caller: null,\n        callee: event.caller,\n        room: event.room,\n        data: desc\n      };\n      peer.setLocalDescription(desc, () => this.dispatchEvent(message), this.dispatchError);\n    }, this.dispatchError);\n  }\n\n  onDisconnect(event: Event) {\n    let channel = this._connection.channels[event.caller.id];\n    channel.close();\n    let peer = this._connection.peers[event.caller.id];\n    peer.close();\n  }\n\n  onOffer(event: Event, signaling: Signaling) {\n    let peer = this._connection.peers[event.caller.id] = PeerFactory.get(this._connection.servers, event);\n    peer.ondatachannel = (dataChannelEvent: RTCDataChannelEvent) => {\n      this._connection.addChannel(event.caller.id, DataChannelFactory.get(dataChannelEvent.channel));\n    };\n    peer.setRemoteDescription(new RTCSessionDescription(event.data), () => {\n    }, this.dispatchError);\n    peer.createAnswer((desc: RTCSessionDescription) => {\n      let message: Event = {\n        type: EventType.ANSWER,\n        caller: null,\n        callee: event.caller,\n        room: event.room,\n        data: desc\n      };\n      peer.setLocalDescription(desc, () => this.dispatchEvent(message), this.dispatchError);\n    }, this.dispatchError);\n  }\n\n  onAnswer(event: Event) {\n    let peer = this._connection.peers[event.caller.id];\n    peer.setRemoteDescription(new RTCSessionDescription(event.data), () => { }, this.dispatchError);\n  }\n\n  onCandidate(event: Event) {\n    if (event.data) {\n      let peer = this._connection.peers[event.caller.id];\n      peer.addIceCandidate(new RTCIceCandidate(event.data));\n    }\n  }\n\n  private dispatchEvent(event: Event) {\n    EventDispatcher.dispatch('send', event);\n  }\n\n  private dispatchError(event: DOMException) {\n    EventDispatcher.dispatch(DataEventType.ERROR, event);\n  }\n}\n"]}