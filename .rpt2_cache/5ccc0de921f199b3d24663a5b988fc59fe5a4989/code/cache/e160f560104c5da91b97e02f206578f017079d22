{"code":"import { SignalingEventType } from './SignalingEventType';\r\nimport { EventDispatcher } from './EventDispatcher';\r\nimport { Configuration } from './Configuration';\r\nimport { Room } from './Room';\r\nvar App = (function () {\r\n    function App(servers, dataConstraints) {\r\n        if (servers === void 0) { servers = {}; }\r\n        if (dataConstraints === void 0) { dataConstraints = null; }\r\n        this.rooms = new Map();\r\n        this.onEvent = this.onEvent.bind(this);\r\n        Configuration.getInstance().setServers(servers);\r\n        Configuration.getInstance().setDataConstraints(dataConstraints);\r\n        EventDispatcher.getInstance().register(SignalingEventType.CONNECT, this.onEvent.bind(this));\r\n        EventDispatcher.getInstance().register(SignalingEventType.OFFER, this.onEvent.bind(this));\r\n        EventDispatcher.getInstance().register(SignalingEventType.DISCONNECT, this.onEvent.bind(this));\r\n        EventDispatcher.getInstance().register(SignalingEventType.ANSWER, this.onEvent.bind(this));\r\n        EventDispatcher.getInstance().register(SignalingEventType.CANDIDATE, this.onEvent.bind(this));\r\n        EventDispatcher.getInstance().register('send', this.onDisconnected.bind(this));\r\n    }\r\n    App.prototype.connect = function (id, stream) {\r\n        if (stream === void 0) { stream = null; }\r\n        if (this.rooms.has(id)) {\r\n            return this.rooms.get(id);\r\n        }\r\n        var room = new Room(id, stream);\r\n        this.rooms.set(id, room);\r\n        return room;\r\n    };\r\n    App.prototype.onEvent = function (event) {\r\n        if (this.rooms.has(event.room.id)) {\r\n            this.rooms.get(event.room.id).handleEvent(event);\r\n        }\r\n    };\r\n    App.prototype.onDisconnected = function (event) {\r\n        if (event.type === SignalingEventType.DISCONNECT) {\r\n            this.rooms.delete(event.room.id);\r\n        }\r\n    };\r\n    return App;\r\n}());\r\nexport { App };\r\n//# sourceMappingURL=App.js.map","map":{"version":3,"file":"App.js","sourceRoot":"","sources":["../../src/app/App.ts"],"names":[],"mappings":"AAAA,OAAO,EAAE,kBAAkB,EAAE,MAAM,sBAAsB,CAAC;AAC1D,OAAO,EAAE,eAAe,EAAE,MAAM,mBAAmB,CAAC;AAEpD,OAAO,EAAE,aAAa,EAAE,MAAM,iBAAiB,CAAC;AAChD,OAAO,EAAE,IAAI,EAAE,MAAM,QAAQ,CAAC;AAE9B;IAGE,aAAY,OAA8B,EAAE,eAA0C;QAA1E,wBAAA,EAAA,YAA8B;QAAE,gCAAA,EAAA,sBAA0C;QAF9E,UAAK,GAAsB,IAAI,GAAG,EAAE,CAAC;QAG3C,IAAI,CAAC,OAAO,GAAG,IAAI,CAAC,OAAO,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC;QAEvC,aAAa,CAAC,WAAW,EAAE,CAAC,UAAU,CAAC,OAAO,CAAC,CAAC;QAChD,aAAa,CAAC,WAAW,EAAE,CAAC,kBAAkB,CAAC,eAAe,CAAC,CAAC;QAEhE,eAAe,CAAC,WAAW,EAAE,CAAC,QAAQ,CAAC,kBAAkB,CAAC,OAAO,EAAE,IAAI,CAAC,OAAO,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC,CAAC;QAC5F,eAAe,CAAC,WAAW,EAAE,CAAC,QAAQ,CAAC,kBAAkB,CAAC,KAAK,EAAE,IAAI,CAAC,OAAO,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC,CAAC;QAC1F,eAAe,CAAC,WAAW,EAAE,CAAC,QAAQ,CAAC,kBAAkB,CAAC,UAAU,EAAE,IAAI,CAAC,OAAO,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC,CAAC;QAC/F,eAAe,CAAC,WAAW,EAAE,CAAC,QAAQ,CAAC,kBAAkB,CAAC,MAAM,EAAE,IAAI,CAAC,OAAO,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC,CAAC;QAC3F,eAAe,CAAC,WAAW,EAAE,CAAC,QAAQ,CAAC,kBAAkB,CAAC,SAAS,EAAE,IAAI,CAAC,OAAO,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC,CAAC;QAC9F,eAAe,CAAC,WAAW,EAAE,CAAC,QAAQ,CAAC,MAAM,EAAE,IAAI,CAAC,cAAc,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC,CAAC;IACjF,CAAC;IAED,qBAAO,GAAP,UAAQ,EAAU,EAAE,MAA0B;QAA1B,uBAAA,EAAA,aAA0B;QAC5C,EAAE,CAAC,CAAC,IAAI,CAAC,KAAK,CAAC,GAAG,CAAC,EAAE,CAAC,CAAC,CAAC,CAAC;YACvB,MAAM,CAAC,IAAI,CAAC,KAAK,CAAC,GAAG,CAAC,EAAE,CAAC,CAAC;QAC5B,CAAC;QAED,IAAM,IAAI,GAAG,IAAI,IAAI,CAAC,EAAE,EAAE,MAAM,CAAC,CAAC;QAClC,IAAI,CAAC,KAAK,CAAC,GAAG,CAAC,EAAE,EAAE,IAAI,CAAC,CAAC;QAEzB,MAAM,CAAC,IAAI,CAAC;IACd,CAAC;IAEO,qBAAO,GAAf,UAAgB,KAAqB;QACnC,EAAE,CAAC,CAAC,IAAI,CAAC,KAAK,CAAC,GAAG,CAAC,KAAK,CAAC,IAAI,CAAC,EAAE,CAAC,CAAC,CAAC,CAAC;YAClC,IAAI,CAAC,KAAK,CAAC,GAAG,CAAC,KAAK,CAAC,IAAI,CAAC,EAAE,CAAC,CAAC,WAAW,CAAC,KAAK,CAAC,CAAC;QACnD,CAAC;IACH,CAAC;IAEO,4BAAc,GAAtB,UAAuB,KAAqB;QAC1C,EAAE,CAAC,CAAC,KAAK,CAAC,IAAI,KAAK,kBAAkB,CAAC,UAAU,CAAC,CAAC,CAAC;YACjD,IAAI,CAAC,KAAK,CAAC,MAAM,CAAC,KAAK,CAAC,IAAI,CAAC,EAAE,CAAC,CAAC;QACnC,CAAC;IACH,CAAC;IACH,UAAC;AAAD,CAAC,AAvCD,IAuCC","sourcesContent":["import { SignalingEventType } from './SignalingEventType';\nimport { EventDispatcher } from './EventDispatcher';\nimport { SignalingEvent } from './SignalingEvent';\nimport { Configuration } from './Configuration';\nimport { Room } from './Room';\n\nexport class App {\n  private rooms: Map<string, Room> = new Map();\n\n  constructor(servers: RTCConfiguration = {}, dataConstraints: RTCDataChannelInit = null) {\n    this.onEvent = this.onEvent.bind(this);\n\n    Configuration.getInstance().setServers(servers);\n    Configuration.getInstance().setDataConstraints(dataConstraints);\n\n    EventDispatcher.getInstance().register(SignalingEventType.CONNECT, this.onEvent.bind(this));\n    EventDispatcher.getInstance().register(SignalingEventType.OFFER, this.onEvent.bind(this));\n    EventDispatcher.getInstance().register(SignalingEventType.DISCONNECT, this.onEvent.bind(this));\n    EventDispatcher.getInstance().register(SignalingEventType.ANSWER, this.onEvent.bind(this));\n    EventDispatcher.getInstance().register(SignalingEventType.CANDIDATE, this.onEvent.bind(this));\n    EventDispatcher.getInstance().register('send', this.onDisconnected.bind(this));\n  }\n\n  connect(id: string, stream: MediaStream = null): Room {\n    if (this.rooms.has(id)) {\n      return this.rooms.get(id);\n    }\n\n    const room = new Room(id, stream);\n    this.rooms.set(id, room);\n\n    return room;\n  }\n\n  private onEvent(event: SignalingEvent) {\n    if (this.rooms.has(event.room.id)) {\n      this.rooms.get(event.room.id).handleEvent(event);\n    }\n  }\n\n  private onDisconnected(event: SignalingEvent) {\n    if (event.type === SignalingEventType.DISCONNECT) {\n      this.rooms.delete(event.room.id);\n    }\n  }\n}\n"]},"dts":{"name":"/Users/vardius/Projects/peer-data/.code/app/App.d.ts","text":"import { Room } from './Room';\r\nexport declare class App {\r\n    private rooms;\r\n    constructor(servers?: RTCConfiguration, dataConstraints?: RTCDataChannelInit);\r\n    connect(id: string, stream?: MediaStream): Room;\r\n    private onEvent(event);\r\n    private onDisconnected(event);\r\n}\r\n"}}
