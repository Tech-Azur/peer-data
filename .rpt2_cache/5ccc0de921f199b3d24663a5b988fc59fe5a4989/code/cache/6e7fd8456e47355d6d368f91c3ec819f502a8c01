{"code":"import { EventDispatcher } from './EventDispatcher';\r\nimport { SignalingEventType } from './SignalingEventType';\r\nimport { Participant } from './Participant';\r\nvar Room = (function () {\r\n    function Room(id, stream) {\r\n        if (stream === void 0) { stream = null; }\r\n        this.participants = new Map();\r\n        this.dispatcher = new EventDispatcher();\r\n        this.stream = null;\r\n        this.id = id;\r\n        this.stream = stream;\r\n        this.onConnect = this.onConnect.bind(this);\r\n        this.onOffer = this.onOffer.bind(this);\r\n        this.onDisconnect = this.onDisconnect.bind(this);\r\n        EventDispatcher.getInstance().dispatch('send', {\r\n            type: SignalingEventType.CONNECT,\r\n            caller: null,\r\n            callee: null,\r\n            room: { id: this.id },\r\n            payload: null,\r\n        });\r\n    }\r\n    Room.prototype.getId = function () {\r\n        return this.id;\r\n    };\r\n    Room.prototype.getStream = function () {\r\n        return this.stream;\r\n    };\r\n    Room.prototype.on = function (event, callback) {\r\n        this.dispatcher.register(event, callback);\r\n    };\r\n    Room.prototype.send = function (payload) {\r\n        // todo: refactor when typescript supports map\r\n        var keys = Array.from(this.participants.keys());\r\n        for (var _i = 0, keys_1 = keys; _i < keys_1.length; _i++) {\r\n            var key = keys_1[_i];\r\n            this.participants.get(key).send(payload);\r\n        }\r\n    };\r\n    Room.prototype.disconnect = function () {\r\n        EventDispatcher.getInstance().dispatch('send', {\r\n            type: SignalingEventType.DISCONNECT,\r\n            caller: null,\r\n            callee: null,\r\n            room: { id: this.id },\r\n            payload: null,\r\n        });\r\n        // todo: refactor when typescript supports map\r\n        var keys = Array.from(this.participants.keys());\r\n        for (var _i = 0, keys_2 = keys; _i < keys_2.length; _i++) {\r\n            var key = keys_2[_i];\r\n            this.participants.get(key).close();\r\n            this.participants.delete(key);\r\n        }\r\n    };\r\n    Room.prototype.handleEvent = function (event) {\r\n        if (this.id !== event.room.id) {\r\n            return;\r\n        }\r\n        switch (event.type) {\r\n            case SignalingEventType.CONNECT:\r\n                this.onConnect(event);\r\n                break;\r\n            case SignalingEventType.OFFER:\r\n                this.onOffer(event);\r\n                break;\r\n            case SignalingEventType.DISCONNECT:\r\n                this.onDisconnect(event);\r\n                break;\r\n            case SignalingEventType.ANSWER:\r\n            case SignalingEventType.CANDIDATE:\r\n                if (this.participants.has(event.caller.id)) {\r\n                    this.participants.get(event.caller.id).handleEvent(event);\r\n                }\r\n                break;\r\n        }\r\n    };\r\n    Room.prototype.onOffer = function (event) {\r\n        var desc = new RTCSessionDescription(event.payload);\r\n        var participant = new Participant(event.caller.id, this, desc);\r\n        this.participants.set(participant.getId(), participant);\r\n        this.dispatcher.dispatch('participant', participant.init());\r\n    };\r\n    Room.prototype.onConnect = function (event) {\r\n        var participant = new Participant(event.caller.id, this);\r\n        this.participants.set(participant.getId(), participant);\r\n        this.dispatcher.dispatch('participant', participant.init());\r\n    };\r\n    Room.prototype.onDisconnect = function (event) {\r\n        if (this.participants.has(event.caller.id)) {\r\n            this.participants.get(event.caller.id).close();\r\n            this.participants.delete(event.caller.id);\r\n        }\r\n    };\r\n    return Room;\r\n}());\r\nexport { Room };\r\n//# sourceMappingURL=Room.js.map","map":{"version":3,"file":"Room.js","sourceRoot":"","sources":["../../src/app/Room.ts"],"names":[],"mappings":"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","sourcesContent":["import { EventDispatcher } from './EventDispatcher';\nimport { SignalingEventType } from './SignalingEventType';\nimport { EventHandler } from './EventHandler';\nimport { Participant } from './Participant';\nimport { SignalingEvent } from './SignalingEvent';\n\nexport class Room {\n  private id: string;\n  private participants: Map<string, Participant> = new Map();\n  private dispatcher: EventDispatcher = new EventDispatcher();\n  private stream: MediaStream = null;\n\n  constructor(id: string, stream: MediaStream = null) {\n    this.id = id;\n    this.stream = stream;\n\n    this.onConnect = this.onConnect.bind(this);\n    this.onOffer = this.onOffer.bind(this);\n    this.onDisconnect = this.onDisconnect.bind(this);\n\n    EventDispatcher.getInstance().dispatch('send', {\n      type: SignalingEventType.CONNECT,\n      caller: null,\n      callee: null,\n      room: { id: this.id },\n      payload: null,\n    } as SignalingEvent);\n  }\n\n  getId(): string {\n    return this.id;\n  }\n\n  getStream(): MediaStream {\n    return this.stream;\n  }\n\n  on(event: string, callback: EventHandler) {\n    this.dispatcher.register(event, callback);\n  }\n\n  send(payload: any) {\n    // todo: refactor when typescript supports map\n    const keys = Array.from(this.participants.keys());\n    for (const key of keys) {\n      this.participants.get(key).send(payload);\n    }\n  }\n\n  disconnect() {\n    EventDispatcher.getInstance().dispatch('send', {\n      type: SignalingEventType.DISCONNECT,\n      caller: null,\n      callee: null,\n      room: { id: this.id },\n      payload: null,\n    } as SignalingEvent);\n\n    // todo: refactor when typescript supports map\n    const keys = Array.from(this.participants.keys());\n    for (const key of keys) {\n      this.participants.get(key).close();\n      this.participants.delete(key);\n    }\n  }\n\n  handleEvent(event: SignalingEvent) {\n    if (this.id !== event.room.id) {\n      return;\n    }\n\n    switch (event.type) {\n      case SignalingEventType.CONNECT:\n        this.onConnect(event);\n        break;\n      case SignalingEventType.OFFER:\n        this.onOffer(event);\n        break;\n      case SignalingEventType.DISCONNECT:\n        this.onDisconnect(event);\n        break;\n      case SignalingEventType.ANSWER:\n      case SignalingEventType.CANDIDATE:\n        if (this.participants.has(event.caller.id)) {\n          this.participants.get(event.caller.id).handleEvent(event);\n        }\n        break;\n    }\n  }\n\n  private onOffer(event: SignalingEvent) {\n    const desc = new RTCSessionDescription(event.payload);\n    const participant = new Participant(event.caller.id, this, desc);\n    this.participants.set(participant.getId(), participant);\n    this.dispatcher.dispatch('participant', participant.init());\n  }\n\n  private onConnect(event: SignalingEvent) {\n    const participant = new Participant(event.caller.id, this);\n    this.participants.set(participant.getId(), participant);\n    this.dispatcher.dispatch('participant', participant.init());\n  }\n\n  private onDisconnect(event: SignalingEvent) {\n    if (this.participants.has(event.caller.id)) {\n      this.participants.get(event.caller.id).close();\n      this.participants.delete(event.caller.id);\n    }\n  }\n}\n"]},"dts":{"name":"/Users/vardius/Projects/peer-data/.code/app/Room.d.ts","text":"import { EventHandler } from './EventHandler';\r\nimport { SignalingEvent } from './SignalingEvent';\r\nexport declare class Room {\r\n    private id;\r\n    private participants;\r\n    private dispatcher;\r\n    private stream;\r\n    constructor(id: string, stream?: MediaStream);\r\n    getId(): string;\r\n    getStream(): MediaStream;\r\n    on(event: string, callback: EventHandler): void;\r\n    send(payload: any): void;\r\n    disconnect(): void;\r\n    handleEvent(event: SignalingEvent): void;\r\n    private onOffer(event);\r\n    private onConnect(event);\r\n    private onDisconnect(event);\r\n}\r\n"}}
