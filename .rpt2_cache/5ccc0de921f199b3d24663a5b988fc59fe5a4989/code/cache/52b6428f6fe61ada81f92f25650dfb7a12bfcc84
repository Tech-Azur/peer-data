{"code":"import { EventDispatcher } from './EventDispatcher';\r\nimport * as io from 'socket.io-client';\r\nvar SocketChannel = (function () {\r\n    function SocketChannel(opts) {\r\n        this.socket = io.connect(opts);\r\n        EventDispatcher.getInstance().register('send', this.onSend.bind(this));\r\n        this.subscribeEvents();\r\n    }\r\n    SocketChannel.prototype.onSend = function (event) {\r\n        this.socket.emit('message', event);\r\n    };\r\n    SocketChannel.prototype.subscribeEvents = function () {\r\n        this.socket.on('message', this.onMessage.bind(this));\r\n        this.socket.on('ipaddr', this.onIp.bind(this));\r\n        this.socket.on('log', this.onLog.bind(this));\r\n    };\r\n    SocketChannel.prototype.onIp = function (ipaddr) {\r\n        EventDispatcher.getInstance().dispatch('log', 'Server IP address is: ' + ipaddr);\r\n    };\r\n    SocketChannel.prototype.onLog = function () {\r\n        var args = [];\r\n        for (var _i = 0; _i < arguments.length; _i++) {\r\n            args[_i] = arguments[_i];\r\n        }\r\n        EventDispatcher.getInstance().dispatch('log', args);\r\n    };\r\n    SocketChannel.prototype.onMessage = function (event) {\r\n        EventDispatcher.getInstance().dispatch(event.type, event);\r\n    };\r\n    return SocketChannel;\r\n}());\r\nexport { SocketChannel };\r\n//# sourceMappingURL=SocketChannel.js.map","map":{"version":3,"file":"SocketChannel.js","sourceRoot":"","sources":["../../src/app/SocketChannel.ts"],"names":[],"mappings":"AAEA,OAAO,EAAE,eAAe,EAAE,MAAM,mBAAmB,CAAC;AACpD,OAAO,KAAK,EAAE,MAAM,kBAAkB,CAAC;AAEvC;IAGE,uBAAY,IAAiC;QAC3C,IAAI,CAAC,MAAM,GAAG,EAAE,CAAC,OAAO,CAAC,IAAI,CAAC,CAAC;QAE/B,eAAe,CAAC,WAAW,EAAE,CAAC,QAAQ,CAAC,MAAM,EAAE,IAAI,CAAC,MAAM,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC,CAAC;QAEvE,IAAI,CAAC,eAAe,EAAE,CAAC;IACzB,CAAC;IAED,8BAAM,GAAN,UAAO,KAAqB;QAC1B,IAAI,CAAC,MAAM,CAAC,IAAI,CAAC,SAAS,EAAE,KAAK,CAAC,CAAC;IACrC,CAAC;IAEO,uCAAe,GAAvB;QACE,IAAI,CAAC,MAAM,CAAC,EAAE,CAAC,SAAS,EAAE,IAAI,CAAC,SAAS,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC,CAAC;QACrD,IAAI,CAAC,MAAM,CAAC,EAAE,CAAC,QAAQ,EAAE,IAAI,CAAC,IAAI,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC,CAAC;QAC/C,IAAI,CAAC,MAAM,CAAC,EAAE,CAAC,KAAK,EAAE,IAAI,CAAC,KAAK,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC,CAAC;IAC/C,CAAC;IAEO,4BAAI,GAAZ,UAAa,MAAc;QACzB,eAAe,CAAC,WAAW,EAAE,CAAC,QAAQ,CAAC,KAAK,EAAE,wBAAwB,GAAG,MAAM,CAAC,CAAC;IACnF,CAAC;IAEO,6BAAK,GAAb;QAAc,cAAc;aAAd,UAAc,EAAd,qBAAc,EAAd,IAAc;YAAd,yBAAc;;QAC1B,eAAe,CAAC,WAAW,EAAE,CAAC,QAAQ,CAAC,KAAK,EAAE,IAAI,CAAC,CAAC;IACtD,CAAC;IAEO,iCAAS,GAAjB,UAAkB,KAAqB;QACrC,eAAe,CAAC,WAAW,EAAE,CAAC,QAAQ,CAAC,KAAK,CAAC,IAAI,EAAE,KAAK,CAAC,CAAC;IAC5D,CAAC;IACH,oBAAC;AAAD,CAAC,AAhCD,IAgCC","sourcesContent":["import { Signaling } from './Signaling';\nimport { SignalingEvent } from './SignalingEvent';\nimport { EventDispatcher } from './EventDispatcher';\nimport * as io from 'socket.io-client';\n\nexport class SocketChannel implements Signaling {\n  private socket: SocketIOClient.Socket;\n\n  constructor(opts?: SocketIOClient.ConnectOpts) {\n    this.socket = io.connect(opts);\n\n    EventDispatcher.getInstance().register('send', this.onSend.bind(this));\n\n    this.subscribeEvents();\n  }\n\n  onSend(event: SignalingEvent) {\n    this.socket.emit('message', event);\n  }\n\n  private subscribeEvents() {\n    this.socket.on('message', this.onMessage.bind(this));\n    this.socket.on('ipaddr', this.onIp.bind(this));\n    this.socket.on('log', this.onLog.bind(this));\n  }\n\n  private onIp(ipaddr: string) {\n    EventDispatcher.getInstance().dispatch('log', 'Server IP address is: ' + ipaddr);\n  }\n\n  private onLog(...args: any[]) {\n    EventDispatcher.getInstance().dispatch('log', args);\n  }\n\n  private onMessage(event: SignalingEvent) {\n    EventDispatcher.getInstance().dispatch(event.type, event);\n  }\n}\n"]},"dts":{"name":"/Users/vardius/Projects/peer-data/.code/app/SocketChannel.d.ts","text":"/// <reference types=\"socket.io-client\" />\r\nimport { Signaling } from './Signaling';\r\nimport { SignalingEvent } from './SignalingEvent';\r\nexport declare class SocketChannel implements Signaling {\r\n    private socket;\r\n    constructor(opts?: SocketIOClient.ConnectOpts);\r\n    onSend(event: SignalingEvent): void;\r\n    private subscribeEvents();\r\n    private onIp(ipaddr);\r\n    private onLog(...args);\r\n    private onMessage(event);\r\n}\r\n"}}
