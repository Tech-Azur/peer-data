{"code":"import * as tslib_1 from \"tslib\";\r\nimport { EventDispatcher } from './EventDispatcher';\r\nimport { SignalingEventType } from './SignalingEventType';\r\nimport { Configuration } from './Configuration';\r\nvar Participant = (function () {\r\n    function Participant(id, room, remoteDesc) {\r\n        if (remoteDesc === void 0) { remoteDesc = null; }\r\n        var _this = this;\r\n        this.dispatcher = new EventDispatcher();\r\n        this.id = id;\r\n        this.room = room;\r\n        this.remoteDesc = remoteDesc;\r\n        this.onAnswer = this.onAnswer.bind(this);\r\n        this.onCandidate = this.onCandidate.bind(this);\r\n        this.peer = new RTCPeerConnection(Configuration.getInstance().getServers());\r\n        this.peer.onicecandidate = this.onIceCandidate.bind(this);\r\n        this.peer.onconnectionstatechange = this.onConnectionStateChange.bind(this);\r\n        this.peer.oniceconnectionstatechange = this.onIceConnectionStateChange.bind(this);\r\n        this.peer.ondatachannel = this.onDataChannel.bind(this);\r\n        this.peer.ontrack = this.dispatchRemoteStream.bind(this);\r\n        var stream = this.room.getStream();\r\n        if (stream instanceof MediaStream) {\r\n            stream.getTracks().map(function (track) { return _this.peer.addTrack(track, stream); });\r\n        }\r\n    }\r\n    Participant.prototype.getId = function () {\r\n        return this.id;\r\n    };\r\n    Participant.prototype.init = function () {\r\n        return tslib_1.__awaiter(this, void 0, void 0, function () {\r\n            var _this = this;\r\n            var offerAnswerOptions;\r\n            return tslib_1.__generator(this, function (_a) {\r\n                switch (_a.label) {\r\n                    case 0:\r\n                        offerAnswerOptions = {\r\n                            offerToReceiveAudio: 1,\r\n                            offerToReceiveVideo: 1,\r\n                        };\r\n                        if (!this.remoteDesc) return [3 /*break*/, 2];\r\n                        return [4 /*yield*/, this.peer\r\n                                .setRemoteDescription(this.remoteDesc)\r\n                                .then(function (_) { return _this.peer.createAnswer(offerAnswerOptions); })\r\n                                .then(function (desc) { return _this.peer.setLocalDescription(desc); })\r\n                                .then(function (_) { return EventDispatcher.getInstance().dispatch('send', {\r\n                                type: SignalingEventType.ANSWER,\r\n                                caller: null,\r\n                                callee: { id: _this.id },\r\n                                room: { id: _this.room.getId() },\r\n                                payload: _this.peer.localDescription,\r\n                            }); })\r\n                                .then(function (_) { return _this; })];\r\n                    case 1: return [2 /*return*/, _a.sent()];\r\n                    case 2:\r\n                        this.channel = this.newDataChannel(Configuration.getInstance().getDataConstraints());\r\n                        this.channel.onmessage = this.onMessage.bind(this);\r\n                        return [4 /*yield*/, this.peer\r\n                                .createOffer(offerAnswerOptions)\r\n                                .then(function (desc) { return _this.peer.setLocalDescription(desc); })\r\n                                .then(function (_) { return EventDispatcher.getInstance().dispatch('send', {\r\n                                type: SignalingEventType.OFFER,\r\n                                caller: null,\r\n                                callee: { id: _this.id },\r\n                                room: { id: _this.room.getId() },\r\n                                payload: _this.peer.localDescription,\r\n                            }); })\r\n                                .then(function (_) { return _this; })];\r\n                    case 3: return [2 /*return*/, _a.sent()];\r\n                }\r\n            });\r\n        });\r\n    };\r\n    Participant.prototype.on = function (event, callback) {\r\n        this.dispatcher.register(event, callback);\r\n    };\r\n    Participant.prototype.send = function (payload) {\r\n        if (this.channel.readyState === 'open') {\r\n            this.channel.send(payload);\r\n        }\r\n    };\r\n    Participant.prototype.close = function () {\r\n        this.channel.close();\r\n        this.peer.close();\r\n        this.dispatcher.dispatch('disconnected');\r\n    };\r\n    Participant.prototype.handleEvent = function (event) {\r\n        if (this.id !== event.caller.id) {\r\n            return;\r\n        }\r\n        switch (event.type) {\r\n            case SignalingEventType.ANSWER:\r\n                this.onAnswer(event);\r\n                break;\r\n            case SignalingEventType.CANDIDATE:\r\n                this.onCandidate(event);\r\n                break;\r\n        }\r\n    };\r\n    Participant.prototype.onAnswer = function (event) {\r\n        var _this = this;\r\n        this.peer\r\n            .setRemoteDescription(new RTCSessionDescription(event.payload))\r\n            .catch(function (evnt) { return _this.dispatcher.dispatch('error', evnt); });\r\n    };\r\n    Participant.prototype.onCandidate = function (event) {\r\n        var _this = this;\r\n        this.peer\r\n            .addIceCandidate(new RTCIceCandidate(event.payload))\r\n            .catch(function (evnt) { return _this.dispatcher.dispatch('error', evnt); });\r\n    };\r\n    Participant.prototype.newDataChannel = function (dataConstraints) {\r\n        var label = Math.floor((1 + Math.random()) * 1e16).toString(16).substring(1);\r\n        return this.peer.createDataChannel(label, dataConstraints);\r\n    };\r\n    Participant.prototype.onIceCandidate = function (iceEvent) {\r\n        if (iceEvent.candidate) {\r\n            EventDispatcher.getInstance().dispatch('send', {\r\n                type: SignalingEventType.CANDIDATE,\r\n                caller: null,\r\n                callee: { id: this.id },\r\n                room: { id: this.room.getId() },\r\n                payload: iceEvent.candidate,\r\n            });\r\n        }\r\n        else {\r\n            // All ICE candidates have been sent\r\n        }\r\n    };\r\n    Participant.prototype.onConnectionStateChange = function () {\r\n        switch (this.peer.connectionState) {\r\n            case 'disconnected':\r\n            case 'failed':\r\n            case 'closed':\r\n                this.dispatcher.dispatch('disconnected');\r\n                break;\r\n        }\r\n    };\r\n    Participant.prototype.onIceConnectionStateChange = function () {\r\n        switch (this.peer.iceConnectionState) {\r\n            case 'disconnected':\r\n            case 'failed':\r\n            case 'closed':\r\n                this.dispatcher.dispatch('disconnected');\r\n                break;\r\n        }\r\n    };\r\n    Participant.prototype.onDataChannel = function (event) {\r\n        this.channel = event.channel;\r\n        this.channel.onmessage = this.onMessage.bind(this);\r\n    };\r\n    Participant.prototype.onMessage = function (event) {\r\n        this.dispatcher.dispatch('message', event.data);\r\n    };\r\n    Participant.prototype.dispatchRemoteStream = function (event) {\r\n        this.dispatcher.dispatch('track', event);\r\n    };\r\n    return Participant;\r\n}());\r\nexport { Participant };\r\n//# sourceMappingURL=Participant.js.map","map":{"version":3,"file":"Participant.js","sourceRoot":"","sources":["../../src/app/Participant.ts"],"names":[],"mappings":"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","sourcesContent":["import { EventDispatcher } from './EventDispatcher';\nimport { SignalingEventType } from './SignalingEventType';\nimport { EventHandler } from './EventHandler';\nimport { SignalingEvent } from './SignalingEvent';\nimport { Configuration } from './Configuration';\nimport { Room } from './Room';\n\nexport class Participant {\n    private id: string;\n    private room: Room;\n    private peer: RTCPeerConnection;\n    private channel: RTCDataChannel;\n    private dispatcher: EventDispatcher = new EventDispatcher();\n    private remoteDesc: RTCSessionDescription;\n\n    constructor(id: string, room: Room, remoteDesc: RTCSessionDescription = null) {\n        this.id = id;\n        this.room = room;\n        this.remoteDesc = remoteDesc;\n\n        this.onAnswer = this.onAnswer.bind(this);\n        this.onCandidate = this.onCandidate.bind(this);\n\n        this.peer = new RTCPeerConnection(Configuration.getInstance().getServers());\n        this.peer.onicecandidate = this.onIceCandidate.bind(this);\n        this.peer.onconnectionstatechange = this.onConnectionStateChange.bind(this);\n        this.peer.oniceconnectionstatechange = this.onIceConnectionStateChange.bind(this);\n        this.peer.ondatachannel = this.onDataChannel.bind(this);\n        this.peer.ontrack = this.dispatchRemoteStream.bind(this);\n\n        const stream = this.room.getStream();\n        if (stream instanceof MediaStream) {\n            stream.getTracks().map(track => this.peer.addTrack(track, stream));\n        }\n    }\n\n    getId(): string {\n        return this.id;\n    }\n\n    async init() {\n        const offerAnswerOptions: RTCOfferOptions = {\n            offerToReceiveAudio: 1,\n            offerToReceiveVideo: 1,\n        };\n\n        if (this.remoteDesc) {\n            return await this.peer\n                .setRemoteDescription(this.remoteDesc)\n                .then(_ => this.peer.createAnswer(offerAnswerOptions))\n                .then((desc: RTCSessionDescription) => this.peer.setLocalDescription(desc))\n                .then(_ => EventDispatcher.getInstance().dispatch('send', {\n                    type: SignalingEventType.ANSWER,\n                    caller: null,\n                    callee: { id: this.id },\n                    room: { id: this.room.getId() },\n                    payload: this.peer.localDescription,\n                } as SignalingEvent))\n                .then(_ => this);\n        } else {\n            this.channel = this.newDataChannel(Configuration.getInstance().getDataConstraints());\n            this.channel.onmessage = this.onMessage.bind(this);\n\n            return await this.peer\n                .createOffer(offerAnswerOptions)\n                .then((desc: RTCSessionDescription) => this.peer.setLocalDescription(desc))\n                .then(_ => EventDispatcher.getInstance().dispatch('send', {\n                    type: SignalingEventType.OFFER,\n                    caller: null,\n                    callee: { id: this.id },\n                    room: { id: this.room.getId() },\n                    payload: this.peer.localDescription,\n                } as SignalingEvent))\n                .then(_ => this);\n        }\n    }\n\n    on(event: string, callback: EventHandler) {\n        this.dispatcher.register(event, callback);\n    }\n\n    send(payload: any) {\n        if (this.channel.readyState === 'open') {\n            this.channel.send(payload);\n        }\n    }\n\n    close() {\n        this.channel.close();\n        this.peer.close();\n        this.dispatcher.dispatch('disconnected');\n    }\n\n    handleEvent(event: SignalingEvent) {\n        if (this.id !== event.caller.id) {\n            return;\n        }\n\n        switch (event.type) {\n            case SignalingEventType.ANSWER:\n                this.onAnswer(event);\n                break;\n            case SignalingEventType.CANDIDATE:\n                this.onCandidate(event);\n                break;\n        }\n    }\n\n    private onAnswer(event: SignalingEvent) {\n        this.peer\n            .setRemoteDescription(new RTCSessionDescription(event.payload))\n            .catch((evnt: DOMException) => this.dispatcher.dispatch('error', evnt));\n    }\n\n    private onCandidate(event: SignalingEvent) {\n        this.peer\n            .addIceCandidate(new RTCIceCandidate(event.payload))\n            .catch((evnt: DOMException) => this.dispatcher.dispatch('error', evnt));\n    }\n\n    private newDataChannel(dataConstraints: RTCDataChannelInit) {\n        const label = Math.floor((1 + Math.random()) * 1e16).toString(16).substring(1);\n\n        return this.peer.createDataChannel(label, dataConstraints);\n    }\n\n    private onIceCandidate(iceEvent: RTCPeerConnectionIceEvent) {\n        if (iceEvent.candidate) {\n            EventDispatcher.getInstance().dispatch('send', {\n                type: SignalingEventType.CANDIDATE,\n                caller: null,\n                callee: { id: this.id },\n                room: { id: this.room.getId() },\n                payload: iceEvent.candidate,\n            } as SignalingEvent);\n        } else {\n            // All ICE candidates have been sent\n        }\n    }\n\n    private onConnectionStateChange() {\n        switch (this.peer.connectionState) {\n            case 'disconnected':\n            case 'failed':\n            case 'closed':\n                this.dispatcher.dispatch('disconnected');\n                break;\n        }\n    }\n\n    private onIceConnectionStateChange() {\n        switch (this.peer.iceConnectionState) {\n            case 'disconnected':\n            case 'failed':\n            case 'closed':\n                this.dispatcher.dispatch('disconnected');\n                break;\n        }\n    }\n\n    private onDataChannel(event: RTCDataChannelEvent) {\n        this.channel = event.channel;\n        this.channel.onmessage = this.onMessage.bind(this);\n    }\n\n    private onMessage(event) {\n        this.dispatcher.dispatch('message', event.data);\n    }\n\n    private dispatchRemoteStream(event: RTCTrackEvent) {\n        this.dispatcher.dispatch('track', event);\n    }\n}\n"]},"dts":{"name":"/Users/vardius/Projects/peer-data/.code/app/Participant.d.ts","text":"import { EventHandler } from './EventHandler';\r\nimport { SignalingEvent } from './SignalingEvent';\r\nimport { Room } from './Room';\r\nexport declare class Participant {\r\n    private id;\r\n    private room;\r\n    private peer;\r\n    private channel;\r\n    private dispatcher;\r\n    private remoteDesc;\r\n    constructor(id: string, room: Room, remoteDesc?: RTCSessionDescription);\r\n    getId(): string;\r\n    init(): Promise<this>;\r\n    on(event: string, callback: EventHandler): void;\r\n    send(payload: any): void;\r\n    close(): void;\r\n    handleEvent(event: SignalingEvent): void;\r\n    private onAnswer(event);\r\n    private onCandidate(event);\r\n    private newDataChannel(dataConstraints);\r\n    private onIceCandidate(iceEvent);\r\n    private onConnectionStateChange();\r\n    private onIceConnectionStateChange();\r\n    private onDataChannel(event);\r\n    private onMessage(event);\r\n    private dispatchRemoteStream(event);\r\n}\r\n"}}
